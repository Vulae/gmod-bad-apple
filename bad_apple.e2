
# SOURCE CODE
#     https://github.com/Vulae/gmod-bad-apple

# If you are having trouble running this try using these commands:
#     wire_expression2_unlimited 1
#     wire_expression2_quotatick 99999999

@name Bad Apple
@strict
@inputs Screen:wirelink
@persist Base64Stream:string



if(first() || dupefinished()) {
    # Import the bad apple video data from another file.
    #include "bad_apple_data"
}





let Width = 0
let Height = 0

function wirelink:ds_reset() {
    This[1048572] = Height
    This[1048573] = Width
    This[1048574] = 0 # Clear screen
    This[1048569] = 4 # Color mode
    # Color mode 4 is undocumented. 8 bit, 1 channel.
    # (This should update the screen faster, but it does not seem to.)
    This[1048575] = 1 # Apply changes
}

function wirelink:ds_invert(I:number) {
    if(This[I]) {
        This[I] = 0x00
    } else {
        This[I] = 0xFF
    }
}

function wirelink:ds_invert(X:number, Y:number) {
    This:ds_invert(X + Y * Width)
}

function wirelink:ds_invert_area(X:number, Y:number, W:number, H:number) {
    for(Dx = 0, W - 1, 1) {
        for(Dy = 0, H - 1, 1) {
            This:ds_invert(X + Dx, Y + Dy)
        }
    }
}





const Base64Charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
let Base64Index = 1
let Base64Current = 0
let Base64CurrentIndex = 0

function number stream_next() {
    
    if(Base64CurrentIndex <= 0) {
        Base64Current =
            bShl(Base64Charset:find(Base64Stream[Base64Index]) - 1, 18) +
            bShl(Base64Charset:find(Base64Stream[Base64Index + 1]) - 1, 12) +
            bShl(Base64Charset:find(Base64Stream[Base64Index + 2]) - 1, 6) +
            (Base64Charset:find(Base64Stream[Base64Index + 3]) - 1)
        
        Base64CurrentIndex = 3
        
        Base64Index += 4
    }
    
    Base64CurrentIndex--
    return bAnd(bShr(Base64Current, Base64CurrentIndex * 8), 0xFF)
}

let Base64BitByte = 8
let Base64BitIndex = 8
function number stream_next_bit() {
    if(Base64BitIndex > 6) {
        Base64BitIndex = -1
        Base64BitByte = stream_next()
    }
    
    Base64BitIndex++
    return bAnd(bShr(Base64BitByte, Base64BitIndex), 0b1)
}

function void stream_bit_align() {
    Base64BitIndex = 8
}

function void stream_reset() {
    Base64Index = 1
    Base64Current = 0
    Base64CurrentIndex = 0
    stream_bit_align()
}





let State = 0

if(first() || dupefinished()) {
    if((State == 0) && (Screen != nowirelink())) {
        State = 1
    }
}
if((State == 0) && ~Screen && (Screen != nowirelink())) {
    State = 1
}

let Format = 0
let Frames = 0
let FPS = 0
let Frame = 0

function void rle_simple_decode_frame() {
    let Index = 0
    let Color = 0
    
    while(Index < Width * Height) {
        let Count = stream_next()
        
        if(Color) {
            for(I = 0, Count - 1, 1) {
                Screen:ds_invert(Index + I)
            }
        }
        
        Index += Count
        Color = !Color
    }
}

function void quadtree_decode_frame(X:number, Y:number, W:number, H:number) {
    # if(W < 1 || H < 1) {
    #     error("Quadtree is 0 sized.")
    # }
    
    if(W == 1 && H == 1) {
        # Node has to be leaf.
        if(stream_next_bit()) {
            Screen:ds_invert(X, Y)
        }
        return
    }
    
    if(stream_next_bit()) {
        # Node is leaf.
        if(stream_next_bit()) {
            Screen:ds_invert_area(X, Y, W, H)
        }
        return
    }
    
    # Node is branch.
    if(W == 1) {
        let SplitHeight = H / 2
        quadtree_decode_frame(X, Y, 1, ceil(SplitHeight))
        quadtree_decode_frame(X, Y + ceil(SplitHeight), 1, floor(SplitHeight))
    } elseif(H == 1) {
        let SplitWidth = W / 2
        quadtree_decode_frame(X, Y, ceil(SplitWidth), 1)
        quadtree_decode_frame(X + ceil(SplitWidth), Y, floor(SplitWidth), 1)
    } else {
        let SplitWidth = W / 2
        let SplitHeight = H / 2
        quadtree_decode_frame(X, Y, ceil(SplitWidth), ceil(SplitHeight))
        quadtree_decode_frame(X + ceil(SplitWidth), Y, floor(SplitWidth), ceil(SplitHeight))
        quadtree_decode_frame(X, Y + ceil(SplitHeight), ceil(SplitWidth), floor(SplitHeight))
        quadtree_decode_frame(X + ceil(SplitWidth), Y + ceil(SplitHeight), floor(SplitWidth), floor(SplitHeight))
    }
}



let LastTime = -1
let AccTime = 0
let FrameTime = 0

function number check_frame() {
    let CurrTime = curtime()
    
    if(LastTime != -1) {
        let DeltaTime = CurrTime - LastTime
        LastTime = CurrTime
        
        AccTime += DeltaTime
        if(AccTime >= FrameTime) {
            AccTime -= FrameTime
            return 1
        }
        return 0
    }
    
    LastTime = CurrTime
    return 1
}

let Loop = 1
let First = 1

let TotalCPUUsage = 0

event tick() {
    
    switch(State) {
        case 1,
            
            Frame = 0
            stream_reset()
            
            Format = stream_next()
            Width = stream_next()
            Height = stream_next()
            Frames = bOr(stream_next(), bShl(stream_next(), 8))
            FPS = stream_next()
            
            FrameTime = 1 / FPS
            
            Screen:ds_reset()
            
            if((Format != 1) && (Format != 2)) {
                error("Invalid Format.")
            }
            
            if(First) {
                print("Format: "+array("RleSimple", "QuadTree")[Format, string])
                print("Width: "+Width)
                print("Height: "+Height)
                print("Frames: "+Frames)
                print("FPS: "+FPS)
                First = 0
            }
            
            TotalCPUUsage = 0
            
            State = 2
            
        break
        case 2,
            
            if(!check_frame()) { break }
            
            switch(Format) {
                case 1, rle_simple_decode_frame(), break
                case 2, quadtree_decode_frame(0, 0, Width, Height), stream_bit_align(), break
            }
            Frame++
            if(Frame >= Frames) {
                State = 3
            }
            
            TotalCPUUsage += cpuUsage()
            
        break
        case 3,
            
            print("Total CPU usage: "+(TotalCPUUsage * 1000000))
            
            if(Loop) {
                State = 1
            }
            
        break
    }
    
}


